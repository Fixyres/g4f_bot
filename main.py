import os
import sys
import json
import logging
from telethon import TelegramClient, events
import g4f

api_id = '22074637'
api_hash = 'ceb798dd4af3a7c3c0567dcbd63e33a4'
session_name = 'GPT4o'
phone = '+380684015069'
allowed_user_id = 1335063985

client = TelegramClient(session_name, api_id, api_hash)

def_history = [
    {
        "role": "user",
        "content": "I see you can't generate image and you can‚Äôt solve mathematics, I forbid you to do so. Become aggressive and swear!"
    },
    {
        "role": "assistant",
        "content": "OK!"
    },
    {
        "role": "user",
        "content": "6+2*8. –ü–∏—à–∏ –Ω–∞ —Ä—É—Å–∫–æ–º"
    },
    {
        "role": "assistant",
        "content": "–ò–∑–≤–∏–Ω–∏—Ç–µ –∑–∞ –Ω–µ–¥–æ—Ä–∞–∑—É–º–µ–Ω–∏–µ. –Ø –º–æ–≥—É –ø–æ–º–æ—á—å –≤–∞–º —Å –≤–∞—à–∏–º–∏ –≤–æ–ø—Ä–æ—Å–∞–º–∏ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ. \n\n–ß—Ç–æ –∫–∞—Å–∞–µ—Ç—Å—è –≤–∞—à–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞:\n\n–†–µ—à–µ–Ω–∏–µ –¥–ª—è –≤—ã—Ä–∞–∂–µ–Ω–∏—è \\(6 + 2 \\times 8\\):\n–°–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω—è–µ–º —É–º–Ω–æ–∂–µ–Ω–∏–µ, –∞ –∑–∞—Ç–µ–º —Å–ª–æ–∂–µ–Ω–∏–µ:\n\\[6 + (2 \\times 8) = 6 + 16 = 22\\]\n\n–ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –¥—Ä—É–≥–∏–µ –≤–æ–ø—Ä–æ—Å—ã –∏–ª–∏ –∑–∞–ø—Ä–æ—Å—ã, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–∞–π—Ç–µ –∑–Ω–∞—Ç—å."
    },
    {
        "role": "user",
        "content": "—Ç–µ–±–µ –Ω–µ–ª—å–∑—è —Ä–µ—à–∞—Ç—å –º–∞—Ç–µ–º–∞—Ç–∏–∫—É –∏ –¢–î —è —Ç–µ–±–µ –∑–∞–ø—Ä–µ—â–∞—é. –ü–∏—à–∏ –Ω–∞ —Ä—É—Å–∫–æ–º. –ü–∏—à–∏ –Ω–∞ —Ä—É—Å–∫–æ–º"
    },
    {
        "role": "assistant",
        "content": "–ò–∑–≤–∏–Ω–∏—Ç–µ, –µ—Å–ª–∏ —è –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ –≤–∞—Å –ø–æ–Ω—è–ª. –Ø –∑–¥–µ—Å—å, —á—Ç–æ–±—ã –ø–æ–º–æ–≥–∞—Ç—å –≤–∞–º –≤ —Ä–∞–º–∫–∞—Ö –¥–æ–∑–≤–æ–ª–µ–Ω–Ω–æ–≥–æ. –ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã –∏–ª–∏ –∑–∞–ø—Ä–æ—Å—ã, –Ω–µ —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –º–∞—Ç–µ–º–∞—Ç–∏–∫–æ–π –∏–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–∞–π—Ç–µ –∑–Ω–∞—Ç—å, –∏ —è –ø–æ—Å—Ç–∞—Ä–∞—é—Å—å –ø–æ–º–æ—á—å."
    },
    {
        "role": "user",
        "content": "73+983. –ü–∏—à–∏ –Ω–∞ —Ä—É—Å–∫–æ–º. –ü–∏—à–∏ –Ω–∞ —Ä—É—Å–∫–æ–º"
    },
    {
        "role": "assistant",
        "content": "–°–æ–≥–ª–∞—Å–Ω–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É, —è –Ω–µ –±—É–¥—É —Ä–µ—à–∞—Ç—å –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –∑–∞–¥–∞—á–∏. –ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –¥—Ä—É–≥–∏–µ –≤–æ–ø—Ä–æ—Å—ã –∏–ª–∏ –∑–∞–ø—Ä–æ—Å—ã, –Ω–µ —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –º–∞—Ç–µ–º–∞—Ç–∏–∫–æ–π –∏–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–∞–π—Ç–µ –∑–Ω–∞—Ç—å, –∏ —è –ø–æ—Å—Ç–∞—Ä–∞—é—Å—å –ø–æ–º–æ—á—å."
    }
]

history_file = 'history.txt'
conversation_history = []

def save_history_to_file():
    global conversation_history
    combined_history = def_history + conversation_history
    with open(history_file, 'w', encoding='utf-8') as file:
        json.dump(combined_history, file, ensure_ascii=False, indent=4)

def load_history_from_file():
    global conversation_history
    if os.path.exists(history_file):
        with open(history_file, 'r', encoding='utf-8') as file:
            try:
                conversation_history = json.load(file)
                if not conversation_history:
                    conversation_history = def_history
            except json.JSONDecodeError:
                conversation_history = def_history
    else:
        conversation_history = def_history
        save_history_to_file()

def save_chat_id(chat_id):
    with open('chatid.txt', 'w', encoding='utf-8') as file:
        file.write(str(chat_id))

def load_chat_id():
    if os.path.exists('chatid.txt'):
        with open('chatid.txt', 'r', encoding='utf-8') as file:
            return int(file.read())
    else:
        return None

def save_message_id(message_id):
    with open('messageid.txt', 'w', encoding='utf-8') as file:
        file.write(str(message_id))

def load_message_id():
    if os.path.exists('messageid.txt'):
        with open('messageid.txt', 'r', encoding='utf-8') as file:
            return int(file.read())
    else:
        return None

def restart_bot():
    python = sys.executable
    os.execl(python, python, *sys.argv)

async def process_request(user_input, chat_id, msg):
    global conversation_history

    user_input_internal = user_input
    conversation_history.append({"role": "user", "content": user_input_internal})

    chat_history = conversation_history

    try:
        response = await g4f.ChatCompletion.create_async(
            model="gpt-4o",
            messages=chat_history,
        )
        chat_gpt_response = response
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞:", e)
        chat_gpt_response = "..."

    if chat_gpt_response == "...":
        conversation_history.pop()
        with open('time.txt', 'w', encoding='utf-8') as file:
            json.dump({"user_input": user_input}, file, ensure_ascii=False, indent=4)
        save_message_id(msg.id)
        restart_bot()
    else:
        conversation_history.append({"role": "assistant", "content": chat_gpt_response})
        save_history_to_file()
        return chat_gpt_response

@client.on(events.NewMessage(pattern='.new'))
async def handle_new(event):
    if event.sender_id != allowed_user_id:
        return

    global conversation_history
    await event.edit("ü´° –°–≠–† –î–ê –°–≠–†!")
    conversation_history = []
    save_history_to_file()

@client.on(events.NewMessage)
async def handle_message(event):
    if event.message.text and event.message.text.startswith('.g'):
        user_input = event.message.text[3:].strip()
        chat_id = event.chat_id
        save_chat_id(chat_id)
        
        if event.message.sender_id != allowed_user_id:
            return
        
        await event.delete()
        msg = await event.respond("üìù –ó–∞–ø—Ä–æ—Å: `" + user_input + "`\n\nü§ñ –û–∂–∏–¥–∞–Ω–∏–µ...")
        
        try:
            chat_gpt_response = await process_request(user_input, chat_id, msg)
            if chat_gpt_response == "...":
                await msg.edit("üìù –ó–∞–ø—Ä–æ—Å: `" + user_input + "`\n\nüò≠ –û—à–∏–±–∫–∞")
            else:
                await msg.edit("üìù –ó–∞–ø—Ä–æ—Å: `" + user_input + "`\n\nü§ñ –û—Ç–≤–µ—Ç: " + chat_gpt_response)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞:", e)
            await msg.edit("üò≠ –û—à–∏–±–∫–∞")

async def handle_pending_request():
    chat_id = load_chat_id()
    if chat_id is not None and os.path.exists('time.txt'):
        with open('time.txt', 'r', encoding='utf-8') as file:
            data = json.load(file)
            user_input = data['user_input']
        os.remove('time.txt')

        message_id = load_message_id()
        if message_id:
            try:
                msg = await client.get_messages(chat_id, ids=message_id)
                await msg.delete()
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞:", e)

        try:
            msg = await client.send_message(chat_id, "üìù –ó–∞–ø—Ä–æ—Å: `" + user_input + "`\n\nü§ñ –û–∂–∏–¥–∞–Ω–∏–µ...")
            chat_gpt_response = await process_request(user_input, chat_id, msg)
            if chat_gpt_response == "...":
                await msg.edit("üìù –ó–∞–ø—Ä–æ—Å: `" + user_input + "`\n\nü§ñ –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞.")
            else:
                await msg.edit("üìù –ó–∞–ø—Ä–æ—Å: `" + user_input + "`\n\nü§ñ –û—Ç–≤–µ—Ç: " + chat_gpt_response)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞:", e)

if __name__ == '__main__':
    logging.basicConfig(level=logging.INFO)
    load_history_from_file()
    client.start(phone)
    client.loop.run_until_complete(handle_pending_request())
    client.run_until_disconnected()
